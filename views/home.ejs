<%- include('partials/header.ejs') %>

  <body>

    <div class="heading d-flex justify-content-between" style="align-items: center;">

      <h2>ToDo List App</h2>

      <h5><a href="/completedtask">Completed Tasks</a></h5>
    </div>


    <!-- Container for tasks -->
    <div class="container text-center" style="background-color: #EEE7DA;border: none;position: relative;height: 100%; max-height: 550px;overflow-y: scroll;">
      <div class="row d-flex flex-wrap justify-content-evenly">
        <% tasks.forEach(task=>{ %>
          <div class="col m-3">
            <!-- Task Card -->
            <div class="card border-0" style="width: 18rem;height: 100%;max-height: 252px;background-color: #AFC8AD;" id=<%=task.id %> >
              <div class="card-body">
                <h5 class="card-title">
                  <%= task.title%>
                </h5>

                <p class="card-text text-truncate py-2">
                  <%= task.description %>
                </p>

                <% if(task.status==1) {%>
                  <h6><span class="badge bg-danger">Pending</span></h6>
                  <% }else if(task.status==2) {%>
                    <h6><span class="badge bg-primary">Running</span></h6>
                    <% }else{ %>
                      <h6><span class="badge bg-success">Completed</span></h6>
                      <% } %>

                      <!-- Task Update Button -->
                        <button type="button" class="btn btn-light updationButtons" data-bs-toggle="modal"
                          data-bs-target="#exampleModal"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                            <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z"/>
                          </svg></button>


                          <!-- Task Delete Button -->
                        <button style="border: 0;" class="btn btn-light deletionButtons" href="#"
                          data-bs-toggle="modal" data-bs-target="#deleteTaskModal"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                          </svg></button>
                          <div class="container mb-0">
                            <% if (task.status == 2) {
                              const currentTime = Date.now()
                                const lastTimeMilliSeconds = currentTime - task.start_time
                                const lastTimeSeconds = lastTimeMilliSeconds / 1000
                                %>

                              <p class="timer mb-0"><%= formatDuration(lastTimeSeconds) %></p>
                              <% }else{ %>
                            <p class="timer mb-0">00:00:00</p>
                            <% } %>
                          </div>

                          <% function formatDuration(seconds){
                            const hours = Math.floor(seconds / 3600);
                            const minutes = Math.floor((seconds % 3600)/60);
                            const remainingSeconds = Math.floor(seconds % 60);
                            
                            const fHour = String(hours).padStart(2,'0');
                            const fMinutes = String(minutes).padStart(2,'0');
                            const fSeconds = String(remainingSeconds).padStart(2,'0');
                            
                            return '' + fHour +':' +fMinutes +':'+ fSeconds +'';
                          } %>

                        <div class="d-flex justify-content-center">
                        <div style="margin-top: 5px;margin-left: auto;margin-right: auto;" class="startEndBtn d-flex">
                           <!-- Task Start Button -->
                          <form action="/startTask" method="post">
                            <input type="hidden" name="id" value=<%=task.id %>>
                            <button style="border: 0;margin: 5px;" type="button" class="btn btn-primary startBtn" href="#"
                              class="card-link ">Start</button>
                          </form>

                          <!-- Task End Button -->
                          <form action="/endTask" method="post">
                            <input type="hidden" name="id" value=<%=task.id %>>
                            <button style="border: 0;margin: 5px;" type="button" class="btn btn-primary endBtn " href="#"
                              class="card-link ">End</button>
                          </form>
                        </div>
                        </div>
              </div>
            </div>
          </div>
          <% }) %>
            <div class="col m-3">
              <div class="card" style="width: 18rem">

                <!-- Task Add Button -->
                <button type="submit" style="border: 0;height: 100%;min-height: 252px;" data-bs-toggle="modal" data-bs-target="#addTaskModal">
                <div class="card-body" style="background-color: #EBEBEB;">
                  <h5 class="card-title">
                    <svg xmlns="http://www.w3.org/2000/svg" width="160" height="160" fill="black"
                      class="bi bi-plus-lg" viewBox="0 0 16 16">
                      <path fill-rule="evenodd"
                        d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                    </svg>
                  </h5>
                </div>
                </button>
              </div>
            </div>
      </div>
    </div>




    <!-- Add Modal -->
    <div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <form action="/addTask" method="post">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="exampleModalLabel">Add New Task</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <input type="text" required name="title" placeholder="Enter task title">
              <input type="text" required name="description" placeholder="Enter task description">
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

              <button type="submit" class="btn btn-primary">Add</button>

            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Update Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <form action="/updateTask" method="post">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="exampleModalLabel">Update Task</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <input type="text" required name="title" id="previousTitle" placeholder="Enter task title">
              <input type="text" required name="description" id="previousDescription" placeholder="Enter task description">
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <input type="hidden" name="id" id="updateId" value="">
              <button type="submit" class="btn btn-primary">Update</button>

            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Delete Modal -->
    <div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <form class="deleteForms">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Task</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <h3>Confirm Delete Task!</h3>
              <p class=".text-danger" id="deleteError"></p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <input type="hidden" name="id" id="deleteId" value="">
              <button type="button" onclick="deleteTask()" class="btn btn-primary">Delete</button>

            </div>
          </div>
        </form>
      </div>
    </div>

  </body>
  <script>

  

    // For Modal Update and Delete
    console.log("Hiii");
    const updateButtons = document.querySelectorAll('.updationButtons')
    updateButtons.forEach(button => {
      button.addEventListener('click', function () {
        console.log("clicked");
        const taskId = button.parentNode.parentNode.id;
        console.log("task Id: " + taskId);

        //Fetch previus Data from Server.
        fetch('/getTask?id='+taskId,{
            method: 'POST',
            headers: {
              'Content-Type':'application/json',
            },
          }).then(response=>{
          response.json().then(data=>{

            document.getElementById('previousTitle').value = data.title;
            document.getElementById('previousDescription').value = data.description;
          });
        }).catch(err=>{
          console.log("Error Generated While fetching Data: "+err.message);
        })

        document.getElementById("updateId").value = taskId;

      });
    });

    const deleteButtons = document.querySelectorAll('.deletionButtons')
    deleteButtons.forEach(button => {
      button.addEventListener('click', function () {
        console.log("clicked");
        const taskId = button.parentNode.parentNode.id;
        console.log("task Id: " + taskId);
        document.getElementById("deleteId").value = taskId;
      });
    });

    // Delete Logic
    const deleteTask = ()=>{

          const taskId = document.getElementById("deleteId").value;

          checkStatus(taskId).then(response=>{
            response.json().then(data=>{
              if(data.status == 2){
                alert("Task is Running: Cant be Deleted!");
                return;
              }else{
                fetch('/deleteTask',{
                  method: "POST",
                  headers: {
                    'Content-Type':'application/json',
                  },
                  body: JSON.stringify({
                    id: taskId,
                  })
                }).then(async response=>{
                  console.log("Response: " + response);
                  const {success} = await response.json();
                    if(success){
                      location.reload();
                      console.log("Deleted Succss")
                    }else{
                      alert("Problem in Deletion!");
                      console.log("Problem in Deletion!");
                    }
                })
              }
            })
          })
        }

        const checkStatus = (taskId)=>{
          return fetch('/getTask?id='+taskId,{
            method: 'POST',
            headers: {
              'Content-Type':'application/json',
            },
          });
        }

    // For Timer 
    // Assing Event Button for all Start Button 
    document.addEventListener('DOMContentLoaded',()=>{
      console.log("DOM Loaded");
      const startButtons = document.querySelectorAll('.startBtn')
      startButtons.forEach(button=>{
        button.addEventListener('click',async ()=>{
          console.log("Start Button Clicked");
          const taskCard = button.closest('.card');
          const taskId = taskCard.id;

          const cardBadge = taskCard.querySelector('.badge');
          cardBadge.classList.remove('bg-danger');
          cardBadge.classList.add('bg-primary');
          cardBadge.innerHTML = "Running";
          
          
          console.log("Timer Started for Task: ",taskId);
          const timerElement = taskCard.querySelector('.timer');
          
          // const response = await fetch('/updateTimer?id='+taskId);

          const resp= await fetch('/getTimerStatus?id='+taskId);

          const {success,status,timer} = await resp.json();

          if(status == 1){
            console.log("Status is 111111");
            const startTime = Date.now();
            const resp = await fetch('/updateStartTime?'+taskId,{
              method: 'POST',
              headers: {
                'Content-Type':'application/json',
             },
              body:JSON.stringify({
               id: taskId,
               startTime: startTime
              }),
            });
          }

          console.log("Timer: " + timer + success + status);

          if(success && status == 2){
            console.log("True");
            updateLocalTimer(timerElement,timer);
          }else{
            console.log("False");
            const timer = new Date().getTime();
            
            updateServerTimer(taskId,2,timer);
            updateLocalTimer(timerElement,timer);
          }
        });
      });
    });

    // Assing Event Button for all End Button 
    document.addEventListener('DOMContentLoaded',async function(){
      const endButtons = document.querySelectorAll('.endBtn')
      endButtons.forEach(button=>{
        button.addEventListener('click',async ()=>{
          console.log("End Button Clicked");
          const taskCard = button.closest('.card');
          const taskId = taskCard.id;
          
          const isRunning = await checkStatus(taskId).then(async response=>{
            const {status} = await response.json();

            if(status !== 2){
              alert("For End of the TASK, It must be started First!");
              return false;
            }else{
              return true;
            }
          });

          if(!isRunning) return;
          
          console.log("Timer Ended for Task: ",taskId);
          const timerElement = taskCard.querySelector('.timer');

          updateLocalTimer(timerElement,null);
          updateServerTimer(taskId,3,null);

          taskCard.remove();
        });
      });
    });

    

    const updateLocalTimer = (timerElement,timer)=>{
      const updateTimer = ()=>{
        if (timer !== null){
          console.log("timer is NOT NULL")
          const currentTime = new Date().getTime();
          const elapsedTime = currentTime - timer;
          const formattedTime = formatTime(elapsedTime);
          timerElement.textContent = formattedTime;
        }else{
          console.log("timer is NULL")
          timerElement.textContent = '00:00:00';
        }
      requestAnimationFrame(updateTimer);
      };
      updateTimer();
    }

    const updateServerTimer = async (taskId,status,timer)=>{
      console.log("UpdateServerTimer Function Called");
      let endTime;
      if (status == 3){
        endTime = Date.now();
      }else{
        endTime = null;
      }
          const response = await fetch('/updateTimer?id='+taskId,{
            method: 'POST',
            headers: {
              'Content-Type':'application/json',
            },
            body:JSON.stringify({
             id: taskId,
              status: status,
              timer: timer,
              endTime: endTime
            }),
          });
        const {success} = await response.json();

        if(success){
          console.log("Server Time Updated");
        
        }else{
          console.log("Server Time Updation Failed");
        }
      
    }

    const formatTime = (time)=>{
      const seconds = Math.floor(time/1000);
      const minutes = Math.floor(seconds/60);
      const hour = Math.floor(minutes/60);
      
      const formattedSeconds = String(seconds % 60).padStart(2,'0');
      const formattedMinutes = String(minutes % 60).padStart(2,'0');
      const formattedHour = String(hour).padStart(2,'0');

      return ''+formattedHour + ':' + formattedMinutes + ':' + formattedSeconds +'';
    }

  </script>
  <%- include('partials/footer.ejs') %>